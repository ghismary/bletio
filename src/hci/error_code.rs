use crate::Error;

#[derive(Debug)]
#[repr(u8)]
pub enum HciErrorCode {
    Success = 0x00,
    UnknownHciCommand = 0x01,
    UnknownConnectionIdentifier = 0x02,
    HardwareFailure = 0x03,
    PageTimeout = 0x04,
    AuthenticationFailure = 0x05,
    PinOrKeyMissing = 0x06,
    MemoryCapacityExceeded = 0x07,
    ConnectionTimeout = 0x08,
    ConnectionLimitExceeded = 0x09,
    SynchronousConnectionLimitToADeviceExceeded = 0x0A,
    AclConnectionAlreadyExists = 0x0B,
    CommandDisallowed = 0x0C,
    ConnectionRejectedDueToLimitedResources = 0x0D,
    ConnectionRejectedDueToSecurityReasons = 0x0E,
    ConnectionRejectedDueToUnacceptableBdAddr = 0x0F,
    ConnectionAcceptTimeoutExceeded = 0x10,
    UnsupportedFeatureOrParameterValue = 0x11,
    InvalidHciCommandParameters = 0x12,
    RemoteUserTerminatedConnection = 0x13,
    RemoteDeviceTerminatedConnectionDueToLowResources = 0x14,
    RemoteDeviceTerminatedConnectionDueToPowerOff = 0x15,
    ConnectionTerminatedByLocalHost = 0x16,
    RepeatedAttempts = 0x17,
    PairingNotAllowed = 0x18,
    UnknownLmpPdu = 0x19,
    UnsupportedRemoteFeatureUnsupportedLmpFeature = 0x1A,
    ScoOffsetRejected = 0x1B,
    ScoIntervalRejected = 0x1C,
    ScoAirModeRejected = 0x1D,
    InvalidLmpParametersInvalidLlParameters = 0x1E,
    UnspecifiedError = 0x1F,
    UnsupportedLmpParameterValueUnsupportedLlParameterValue = 0x20,
    RoleChangeNotAllowed = 0x21,
    LmpResponseTimeoutLlResponseTimeout = 0x22,
    LmpErrorTransactionCollision = 0x23,
    LmpPduNotAllowed = 0x24,
    EncryptionModeNotAcceptable = 0x25,
    LinkKeyCannotBeChanged = 0x26,
    RequestedQosNotSupported = 0x27,
    InstantPassed = 0x28,
    PairingWithUnitKeyNotSupported = 0x29,
    DifferentTransactionCollision = 0x2A,
    // Reserved = 0x2B,
    QosUnacceptableParameter = 0x2C,
    QosRejected = 0x2D,
    ChannelClassificationNotSupported = 0x2E,
    InsufficientSecurity = 0x2F,
    ParameterOutOfMandatoryRange = 0x30,
    // Reserved = 0x31,
    RoleSwitchPending = 0x32,
    // Reserved = 0x33,
    ReservedSlotViolation = 0x34,
    RoleSwitchFailed = 0x35,
    ExtendedInquiryResponseTooLarge = 0x36,
    SecureSimplePairingNotSupportedByHost = 0x37,
    HostBusyPairing = 0x38,
    ConnectionRejectedDueToNoSuitableChannelFound = 0x39,
    ControllerBusy = 0x3A,
    UnacceptableConnectionParameters = 0x3B,
    DirectedAdvertisingTimeout = 0x3C,
    ConnectionTerminatedDueToMicFailure = 0x3D,
    ConnectionFailedToBeEstablished = 0x3E,
    MacConnectionFailed = 0x3F,
    CoarseClockAdjustmentRejectedButWillTryToAdjustUsingClockDragging = 0x40,
}

impl TryFrom<u8> for HciErrorCode {
    type Error = Error;

    fn try_from(value: u8) -> Result<Self, Self::Error> {
        match value {
            0x00 => Ok(HciErrorCode::Success),
            0x01 => Ok(HciErrorCode::UnknownHciCommand),
            0x02 => Ok(HciErrorCode::UnknownConnectionIdentifier),
            0x03 => Ok(HciErrorCode::HardwareFailure),
            0x04 => Ok(HciErrorCode::PageTimeout),
            0x05 => Ok(HciErrorCode::AuthenticationFailure),
            0x06 => Ok(HciErrorCode::PinOrKeyMissing),
            0x07 => Ok(HciErrorCode::MemoryCapacityExceeded),
            0x08 => Ok(HciErrorCode::ConnectionTimeout),
            0x09 => Ok(HciErrorCode::ConnectionLimitExceeded),
            0x0A => Ok(HciErrorCode::SynchronousConnectionLimitToADeviceExceeded),
            0x0B => Ok(HciErrorCode::AclConnectionAlreadyExists),
            0x0C => Ok(HciErrorCode::CommandDisallowed),
            0x0D => Ok(HciErrorCode::ConnectionRejectedDueToLimitedResources),
            0x0E => Ok(HciErrorCode::ConnectionRejectedDueToSecurityReasons),
            0x0F => Ok(HciErrorCode::ConnectionRejectedDueToUnacceptableBdAddr),
            0x10 => Ok(HciErrorCode::ConnectionAcceptTimeoutExceeded),
            0x11 => Ok(HciErrorCode::UnsupportedFeatureOrParameterValue),
            0x12 => Ok(HciErrorCode::InvalidHciCommandParameters),
            0x13 => Ok(HciErrorCode::RemoteUserTerminatedConnection),
            0x14 => Ok(HciErrorCode::RemoteDeviceTerminatedConnectionDueToLowResources),
            0x15 => Ok(HciErrorCode::RemoteDeviceTerminatedConnectionDueToPowerOff),
            0x16 => Ok(HciErrorCode::ConnectionTerminatedByLocalHost),
            0x17 => Ok(HciErrorCode::RepeatedAttempts),
            0x18 => Ok(HciErrorCode::PairingNotAllowed),
            0x19 => Ok(HciErrorCode::UnknownLmpPdu),
            0x1A => Ok(HciErrorCode::UnsupportedRemoteFeatureUnsupportedLmpFeature),
            0x1B => Ok(HciErrorCode::ScoOffsetRejected),
            0x1C => Ok(HciErrorCode::ScoIntervalRejected),
            0x1D => Ok(HciErrorCode::ScoAirModeRejected),
            0x1E => Ok(HciErrorCode::InvalidLmpParametersInvalidLlParameters),
            0x1F => Ok(HciErrorCode::UnspecifiedError),
            0x20 => Ok(HciErrorCode::UnsupportedLmpParameterValueUnsupportedLlParameterValue),
            0x21 => Ok(HciErrorCode::RoleChangeNotAllowed),
            0x22 => Ok(HciErrorCode::LmpResponseTimeoutLlResponseTimeout),
            0x23 => Ok(HciErrorCode::LmpErrorTransactionCollision),
            0x24 => Ok(HciErrorCode::LmpPduNotAllowed),
            0x25 => Ok(HciErrorCode::EncryptionModeNotAcceptable),
            0x26 => Ok(HciErrorCode::LinkKeyCannotBeChanged),
            0x27 => Ok(HciErrorCode::RequestedQosNotSupported),
            0x28 => Ok(HciErrorCode::InstantPassed),
            0x29 => Ok(HciErrorCode::PairingWithUnitKeyNotSupported),
            0x2A => Ok(HciErrorCode::DifferentTransactionCollision),
            0x2C => Ok(HciErrorCode::QosUnacceptableParameter),
            0x2D => Ok(HciErrorCode::QosRejected),
            0x2E => Ok(HciErrorCode::ChannelClassificationNotSupported),
            0x2F => Ok(HciErrorCode::InsufficientSecurity),
            0x30 => Ok(HciErrorCode::ParameterOutOfMandatoryRange),
            0x32 => Ok(HciErrorCode::RoleSwitchPending),
            0x34 => Ok(HciErrorCode::ReservedSlotViolation),
            0x35 => Ok(HciErrorCode::RoleSwitchFailed),
            0x36 => Ok(HciErrorCode::ExtendedInquiryResponseTooLarge),
            0x37 => Ok(HciErrorCode::SecureSimplePairingNotSupportedByHost),
            0x38 => Ok(HciErrorCode::HostBusyPairing),
            0x39 => Ok(HciErrorCode::ConnectionRejectedDueToNoSuitableChannelFound),
            0x3A => Ok(HciErrorCode::ControllerBusy),
            0x3B => Ok(HciErrorCode::UnacceptableConnectionParameters),
            0x3C => Ok(HciErrorCode::DirectedAdvertisingTimeout),
            0x3D => Ok(HciErrorCode::ConnectionTerminatedDueToMicFailure),
            0x3E => Ok(HciErrorCode::ConnectionFailedToBeEstablished),
            0x3F => Ok(HciErrorCode::MacConnectionFailed),
            0x40 => {
                Ok(HciErrorCode::CoarseClockAdjustmentRejectedButWillTryToAdjustUsingClockDragging)
            }
            _ => Err(Error::InvalidErrorCode(value)),
        }
    }
}
